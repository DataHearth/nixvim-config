{
  "go.type.function": {
    "prefix": "tyf",
    "body": "type $1 func($2) $3",
    "description": "Type function declaration"
  },
  "go.type.interface": {
    "prefix": "tyi",
    "body": "type $1 interface {\n\t$0\n}",
    "description": "Interface type declaration"
  },
  "go.type.struct": {
    "prefix": "tys",
    "body": "type $1 struct {\n\t$0\n}",
    "description": "Struct type declaration"
  },
  "go.package.main": {
    "prefix": "pkgm",
    "body": "package main\n\nfunc main() {\n\t$0\n}",
    "description": "Package main with main function"
  },
  "go.function": {
    "prefix": "func",
    "body": "func $1($2) $3 {\n\t$0\n}",
    "description": "Function declaration"
  },
  "go.error.check": {
    "prefix": "ir",
    "body": "if err != nil {\n\t$0\n}",
    "description": "Error nil check"
  },
  "go.http.handler": {
    "prefix": "hand",
    "body": "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}",
    "description": "HTTP handler function"
  },
  "go.test.table": {
    "prefix": "tdt",
    "body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
    "description": "Table-driven test template"
  },
  "go.tag.json": {
    "prefix": "json",
    "body": "`json:\"$1\"`",
    "description": "JSON struct tag"
  },
  "go.loop.range": {
    "prefix": "forr",
    "body": "for ${1:_, }${2:v} := range $3 {\n\t$0\n}",
    "description": "Range-based for loop"
  },
  "go.loop.infinite": {
    "prefix": "for",
    "body": "for $1{\n\t$0\n}",
    "description": "Infinite for loop"
  },
  "go.loop.counter": {
    "prefix": "fori",
    "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
    "description": "Counter-based for loop"
  },
  "go.type.map": {
    "prefix": "map",
    "body": "map[$1]$2",
    "description": "Map type declaration"
  },
  "go.error.inline": {
    "prefix": "ief",
    "body": "if ${1:err} := $2; err != nil {\n\t$0\n}",
    "description": "Inline error check"
  }
}
